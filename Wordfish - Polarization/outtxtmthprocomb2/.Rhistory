}
if(swapp != TRUE)
break
}
A
A
A <- sample(1:100,10)
A
(A <- sample(1:100,10))
n <- length(A)
for(i in 1:(n-1))
{
for(j in 1:(n-i))
{
if(A[j]>A[j+1])
{
temp <- A[j]
A[j] <- A[j+1]
A[j+1] <- A[j]
swapp <- TRUE
}
}
if(swapp != TRUE)
break
}
A
(A <- sample(1:100,10))
n <- length(A)
for(i in 1:(n-1))
{
for(j in 1:(n-i))
{
if(A[j]>A[j+1])
{
temp <- A[j]
A[j] <- A[j+1]
A[j+1] <- A[j]
swapp <- TRUE
}
}
if(swapp != TRUE)
break
}
A
(A <- sample(1:100,10))
n <- length(A)
for(i in 1:(n-1))
{
for(j in 1:(n-i))
{
if(A[j]>A[j+1])
{
temp <- A[j]
A[j] <- A[j+1]
A[j+1] <- A[j]
swapp <- TRUE
}
}
if(swapp != TRUE)
break
}
A
(A <- sample(1:100,10))
n <- length(A)
for(i in 1:(n-1))
{
for(j in 1:(n-i))
{
if(A[j]>A[j+1])
{
temp <- A[j]
A[j] <- A[j+1]
A[j+1] <- temp
swapp <- TRUE
}
}
if(swapp != TRUE)
break
}
A
(A <- sample(1:100,10))
n <- length(A)
for(i in 2:n)
{
k <- A[i]
j <- i-1
while(j>0 && A[j]>k)
{
A[j+1] <- A[j]
j <- j-1
}
A[j+1] <- k
}
A
(A <- sample(1:100,10))
n <- length(A)
for(i in 1:(n-1))
{
min_idx <- i
for(j in (i+1):n)
{
if(A[j]>A[min_idx])
{
temp <- A[j]
A[j] <- A[min_idx]
A[min_idx] <- temp
}
}
}
A
(A <- sample(1:100,10))
n <- length(A)
for(i in 1:(n-1))
{
min_idx <- i
for(j in (i+1):n)
{
if(A[j]<A[min_idx])
{
min_idx <- j
}
temp <- A[i]
A[i] <- A[min_idx]
A[min_idx] <- temp
}
}
A
rm(list = ls())
x = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
y = c(0,20,43,53,86,70,54,37,18,10,5,2,2,0,0,0,0)
length(x) == length(y)
sum(f)
sum(f*x)
f = c(0,20,43,53,86,70,54,37,18,10,5,2,2,0,0,0,0)
sum(f)
sum(f*x)
1872/400
fact = function(x)
{
if(x==1)
return 1
else
return x*fact(x-1)
}
fact(5)
fact = function(x)
{
if(x==1)
return(1)
else
return(x*fact(x-1))
}
fact(5)
f_hat = 2.7^(-4.68) * (4.68^x) / fact(x)
f_hat
f_hat = (2.7^(-4.68)) * (4.68^x) / fact(x)
rm(list = ls())
fact = function(x)
{
if(x==1)
return(1)
else
return(x*fact(x-1))
}
(2.7^(-4.68))
f_hat = 0.009576738 * (4.68^x) / fact(x)
x = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
f = c(0,20,43,53,86,70,54,37,18,10,5,2,2,0,0,0,0)
fact = function(x)
{
if(x==1)
return(1)
else
return(x*fact(x-1))
}
f_hat = 0.009576738 * (4.68^x) / fact(x)
f_hat = (0.009576738 * (4.68^x) / fact(x))*400
x = 0
((0.009576738* (4.68^x))/fact(x))*400
fact = function(x)
{
if(x==0)
return(1)
else
return(x*fact(x-1))
}
fact(5)
x = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
f = c(0,20,43,53,86,70,54,37,18,10,5,2,2,0,0,0,0)
rm(list = ls())
x = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
f = c(0,20,43,53,86,70,54,37,18,10,5,2,2,0,0,0,0)
fact = function(x)
{
if(x==0)
return(1)
else
return(x*fact(x-1))
}
f_hat = (0.009576738 * (4.68^x) / fact(x))*400
f_hat
0.009576738 * (4.68^x) / fact(x)
fact(x)
x = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
fact(x)
for(i in 1:17)
{
f_hat[i] = ((0.009576738* (4.68^x[i]))/fact(x[i]))*400
}
f_hat
freq = matrix(f,f_hat)
freq
length(f) == length(f_hat)
freq = matrix(0,17,2)
freq[,1] = f
freq[,2] =f_hat
freq
sum(f_hat)
sum(f)
chi = sum((f - f_hat)^2/f_hat)
chi
qchisq(0.05,15,lower.tail = FALSE)
?rnorm
pchisq(10.509,15,lower.tail = FALSE)
x = c(18.1,20.3,18.3,15.6,22.5,16.8,17.6,16.9,18.2,17,19.3,16.5,19.5,18.6,20,18.8,19.1,17.5,18.5,18)
length(x)
rm(list = ls())
x = c(7.41,7.77,7.44,7.4,7.38,7.93,7.58,8.28,7.23,7.52,7.82,7.72,7.84,7.63,7.68)
y = c(7.08,7.49,7.42,7.04,6.92,7.22,7.68,7.24,7.74,7.81,7.28,7.43,7.47)
length(x) == length(y)
length(x)
length(y)
mean(y)
s = var(y)
s
(mean(y) - 7.2)/(s/sqrt(length(y)))
qt(0.05,12,lower.tail=FALSE)
(mean(y) - 7.2)
qt(0.05,12,lower.tail=FALSE)
(mean(y) - 7.2)/(s/sqrt(length(y)))
(mean(y) - 7.2)/(sqrt(s/length(y)))
qt(0.05,12,lower.tail=FALSE)
(14)*var(x)/0.09
qchisq(0.025,14,lower.tail=FALSE)
qchisq(0.925,14,lower.tail=FALSE)
var(x)/var(y)
qf(0.025,14,12,lower.tail=FALSE)
qf(0.975,14,12,lower.tail=FALSE)
qchisq(0.975,14,lower.tail=FALSE)
rep(1:4, times = c(2,6,2,1,3))
rep(1:4, each = c(2,6,2,1,3))
rep(1:5, each = c(2,6,2,1,3))
?seq
?rep
rep(1:5, c(2,6,2,1,3))
library(lpSolve)
f <- c(1000,1000,1000)
c <- matrix(0,3,5)
c[1,] <- c(4,5,6,8,10)
c[1,] <- c(6,4,3,5,8)
c[1,] <- c(9,7,4,3,4)
(a <- c[1,])
(b = c(c[1,],c[2,]))
c <- matrix(0,3,5)
c[1,] <- c(4,5,6,8,10)
c[1,] <- c(6,4,3,5,8)
c[1,] <- c(9,7,4,3,4)
c
c <- matrix(0,3,5)
c[1,] <- c(4,5,6,8,10)
c[2,] <- c(6,4,3,5,8)
c[3,] <- c(9,7,4,3,4)
(b = c(c[1,],c[2,]))
c
library(lpSolve)
y.coeff <- c(1000,1000,1000)
c <- matrix(0,3,5)
c[1,] <- c(4,5,6,8,10)
c[2,] <- c(6,4,3,5,8)
c[3,] <- c(9,7,4,3,4)
coeff.obj = c(y.coeff,c(c[1,],c[2,],c[3,]))
coeff.obj
coeff.obj
rm(list = ls())
x2 = c(16,13,10,7,7,5,4,3,3.5,2)
x3 = c(15,50,30,42,50,54,65,72,85,90)
y = c(3.5,4.3,5,6,7,9,8,10,12,14)
sum(x2)
sum(x3)
sum(x2^2)
sum(x3^2)
sum(y*x2)
sum(y*x3)
sum(x2*x3)
mean(x2)
mean(y)
(-123.64*(-841.15) - 667.86*192.25)/(841.15^2 - 4958.1*192.225)
s_x2y = -125.64
s_x3y = 667.86
s_x2x2 = 192.225
s_x3x3 = 1958.1
s_x2x3 = -841.15
(s_x3y*s_x2x3 - s_x2y*s_x3x3)/(s_x2x3^2 - s_x2x2*s_x3x3)
9.107622 - 0.953546*x2 + 0.099359*x3
y_hat <- 9.107622 - 0.953546*x2 + 0.099359*x3
sum(y_hat^2)
mean(y_hat)^2
sum(y_hat^2) - 10*mean(y_hat)^2
sum(y^2)
mean(y)^2
sum(y^2) - 10*mean(y)^2
lm(y ~ x2 + x3)
y_hat <- 4.52432 - 0.24911*x2 + 0.09244x3
y_hat <- 4.52432 - 0.24911*x2 + 0.09244*x3
y_hat
var(y_hat)
0.1*sum(y_hat^2) - mean(y_hat)^2
0.9*sum(y_hat^2) - mean(y_hat)^2
0.1*sum(y_hat^2) - mean(y_hat)^2
var(y_hat)/var(y)
sum(y_hat^2)
mean(y_hat)^2
sum(y_hat^2) - 10*mean(y_hat)^2
0.1(sum(y^2) - 10*mean(y)^2)
0.1*(sum(y^2) - 10*mean(y)^2)
9.3036/10.4796
?qf
qf(0.05,2,7,lower.tail = FALSE)
cor(y,x2)
x2 = c(16,13,10,7,7,5,4,3,3.5,2)
x3 = c(15,50,30,42,50,54,65,72,85,90)
y = c(3.5,4.3,5,6,7,9,8,10,12,14)
cor(y,x3)
cor(y,x2)
cor(x3,x2)
(cor(y,x2) - cor(y,x3)*cor(x2,x3)) / ((1-cor(y,x3)^2)*(1-cor(x2,x3)^2))
(cor(y,x3) - cor(y,x2)*cor(x2,x3)) / ((1-cor(y,x2)^2)*(1-cor(x2,x3)^2))
(cor(y,x3) - cor(y,x2)*cor(x2,x3)) / sqrt((1-cor(y,x2)^2)*(1-cor(x2,x3)^2))
(cor(y,x2) - cor(y,x3)*cor(x2,x3)) / sqrt((1-cor(y,x3)^2)*(1-cor(x2,x3)^2))
rm(list = ls())
c <- c(236,254,267,281,290,311,325,335,255,275,401,431)
x <- c(257,275,293,309,319,337,350,364,385,405,437,469)
c_hat <- -3 + 0.9277*x
c_hat
ei <- c - c_hat
ei
c <- c(236,254,267,281,290,311,325,335,355,375,401,431)
ei <- c - c_hat
ei
sum(ei^2)
qt(0.025,10,lower.tail=FALSE)
rm(list = ls())
rm(list = ls())
y <- c(100,75,80,70,50,65,90,100,110,60)
x1 <- c(5,7,6,6,8,7,5,4,3,9)
x2 <- c(1000,600,1200,500,300,400,1300,1100,1300,300)
lm(z~x1+x2)
lm(z ~ x1+x2)
lm(y ~ x1+x2)
sum((y-mean(y))^2)
c <- c(138,146,134,157,213,211,217,237,257,277,303,335)
x <- c(170,180,185,195,230,240,245,255,280,305,350,365)
c_hat <- -13 + 0.95*x
c_hat
e <- c - c_hat
e
x <- c(-2,-1,0,1,2)
x <- c(1.253,1.568,2.610,3.239,3.597)
x <- c(-2,-1,0,1,2)
y <- c(1.253,1.568,2.610,3.239,3.597)
lm(y ~ x)
x <- c(0,4,14,10,9,8,6,1)
y <- c(2.4,7.2,10.3,9.1,10.2,4.1,7.6,3.5)
lm(y ~ x)
sum((x - mean(x))^2)
sum((y - mean(y))^2)
y <- c(2.4,7.2,10.3,9.1,10.2,4.1,7.6,3.5)
sum((y - mean(y))^2)
?qt
qt(0.05,6)
rm(list= ls)
rm(list= ls())
m <- matrix(0,3,3)
m[1,] <- c(0.8,0.2,0)
m[2,] <- c(0.6,0.3,0.1)
m[3,] <- c(0,0.2,0.8)
m
m %*% m
m %*% m %*% m
m %*% m %*% m %*% m
m %*% m %*% m %*% m %*% m
m %*% m %*% m %*% m %*% m %*% m
m %*% m %*% m %*% m %*% m %*% m %*% m
m %*% m %*% m %*% m %*% m %*% m %*% m %*% m
ssm <- m %*% m %*% m %*% m %*% m %*% m %*% m
c <- matrix(c(0,0,0),ncol = 3)
c %*% ssm
c <- matrix(c(100,100,100),ncol = 3)
c %*% ssm
library(quanteda)
library(ggplot2)
require(quanteda.textmodels)
require(quanteda.textplots)
#rm(list = ls())
#Function to read text from file
read_text <- function(file_path) {
text <- readLines(file_path)
return(text)
}
setwd('C:/Ritoban/IIMK/Spyder Projects/Wordcloud/outtxtmthprocomb2')
#Get a list of all the parties----
parties <- list.files(recursive = FALSE)
#Initializations----
preprocessed_text = list()
no_of_files = list()
count = 1
j = 1
#Read all the cleaned .TXT----
for(party in parties){
files <-  list.files(party)
no_of_files[j] <- length(files)
j = j+1
for(file in files){
preprocessed_text[count] <-  read_text(paste0(party,'/',file))
count = count + 1
}
}
#List of folders and their number of files----
names(no_of_files) <- parties
no_of_files
#Creating the corpus----
corpus <- corpus(c(unlist(preprocessed_text[1:4])))
# Create a document-feature matrix
dfm <- dfm(corpus)
print('created dfm')
dfm
names <- c('n1','n2','n3','n4')
rownames(dfm) <- names
dfm
preprocessed_text[1]
str_count(preprocessed_text,'wake')
count(preprocessed_text,'wake')
library(stringr)
str_count(preprocessed_text,'wake')
str_count(preprocessed_text[1],'wake')
dfm
str_count(preprocessed_text[1],'confirmed')
str_count(preprocessed_text[1],'far')
preprocessed_text[1] = 'My name is Ritoban'
preprocessed_text[1] = 'My name is Ritoban Sen'
preprocessed_text[1][:20]
preprocessed_text[1][1:20]
c(unlist(preprocessed_text[1][1:20])
print('created dfm')
preprocessed_text[1] = "wake confirmed case covid india far union health ministry made functional laboratory testing sample lab designated helping sample collection covid enhance capacity diagnosis detection disease following increase load screening sample suspected case symptom travel history affected country department health researchicmr commissioned laboratory covid testing india"
preprocessed_text[2] = "mumbai strict adherence threeweek lockdown best solution country fight covid even data predict outcome say scientist accurate data covid indian scenario available government taken step basis best estimate add available data appears vast majority individual exposed virusaround exposed develop clinical symptom within day small fraction people develop symptom"
#Creating the corpus----
corpus <- corpus(c(unlist(preprocessed_text[1:2])))
# Create a document-feature matrix
dfm <- dfm(corpus)
print('created dfm')
dfm
rm(list = ls())
library(quanteda)
library(ggplot2)
require(quanteda.textmodels)
require(quanteda.textplots)
library(stringr)
#Function to read text from file
read_text <- function(file_path) {
text <- readLines(file_path)
return(text)
}
setwd('C:/Ritoban/IIMK/Spyder Projects/Wordcloud/outtxtmthprocomb2')
#Get a list of all the parties----
parties <- list.files(recursive = FALSE)
#Initializations----
preprocessed_text = list()
no_of_files = list()
count = 1
j = 1
#Read all the cleaned .TXT----
for(party in parties){
files <-  list.files(party)
no_of_files[j] <- length(files)
j = j+1
for(file in files){
preprocessed_text[count] <-  read_text(paste0(party,'/',file))
count = count + 1
}
}
preprocessed_text[2] = "mumbai strict adherence threeweek lockdown best solution country fight covid even data predict outcome say scientist accurate data covid indian scenario available government taken step basis best estimate add available data appears vast majority individual exposed virusaround exposed develop clinical symptom within day small fraction people develop symptom"
preprocessed_text[1] = "wake confirmed case covid india far union health ministry made functional laboratory testing sample lab designated helping sample collection covid enhance capacity diagnosis detection disease following increase load screening sample suspected case symptom travel history affected country department health researchicmr commissioned laboratory covid testing india"
#Creating the corpus----
corpus <- corpus(c(unlist(preprocessed_text[1:2])))
corpus
dfm <- dfm(corpus)
print('created dfm')
dfm
preprocessed_text[1]
preprocessed_text[2]
library(stringr)
str_count(preprocessed_text[1],'wake')
str_count(preprocessed_text[1],'covid')
str_count(preprocessed_text[2],'covid')
str_count(preprocessed_text[2],'confirmed')
# Apply Wordfish algorithm
wordfish_results <- textmodel_wordfish(dfm)
print('applied wf')
positions <- data.frame(Article = c("BJP m1", "BJP m2"), Position = wordfish_results$theta)#, "OTHER m6", "OTHER m7", "OTHER m8", "OTHER m9", "OTHER m10", "OTHER m11", "OTHER m12", "OTHER m13", "OTHER m14", "OTHER m15", "OTHER m16", "OTHER m17", "OTHER m18", "OTHER m19", "OTHER m20", "OTHER m21", "OTHER m22", "OTHER m23", "OTHER m24", "OTHER m25"), Position = wordfish_results$theta)
# Print ideological positions
print(positions)
